----------------- Testing Card: Council Room ----------------
File 'randomtest1.c'
Lines executed:100.00% of 39
Creating 'randomtest1.c.gcov'

        -:    0:Source:randomtest1.c
        -:    0:Graph:randomtest1.gcno
        -:    0:Data:randomtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest3: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "Council Room"
        -:   15:
        -:   16:
      500:   17:int assertTrue(){
      500:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int buys = 0;
        1:   27:    int otherPlayerDraw = 0;
        1:   28:    int shuffledCards = 0;
        1:   29:    int random = 0;
        -:   30:
        1:   31:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   32:    int seed = 5281;
        1:   33:    int numPlayers = 2;
        1:   34:    int thisPlayer = 0;
        -:   35:	struct gameState G, testG;
        1:   36:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   37:			sea_hag, tribute, smithy, council_room};
        -:   38:
        -:   39:	
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   41:    
      101:   42:    for(int i = 0; i < 100; i++){
        -:   43:        // initialize a game state and player cards
      100:   44:        initializeGame(numPlayers, k, seed, &G);
        -:   45:
      100:   46:        random = rand() % 300;
      100:   47:        G.numBuys = random;
        -:   48:
        -:   49:        //adds random amount of random cards to each player's deck
      100:   50:        random = rand() % 300;
    15007:   51:        for(int j = 0; j < random; j++){
    14907:   52:            gainCard(k[rand() % 10], &G, 1, 0);
    14907:   53:            gainCard(k[rand() % 10], &G, 1, 1);
        -:   54:        }
        -:   55:
      100:   56:        memcpy(&testG, &G, sizeof(struct gameState));
        -:   57:
        -:   58:
      100:   59:        cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   60:
      100:   61:        newCards = 4; //four cards
      100:   62:        buys = 1;
      100:   63:        otherPlayerDraw = 1;
        -:   64:        
      100:   65:        if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
      100:   66:            assertTrue();
      100:   67:        if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
      100:   68:            assertTrue();
        -:   69:        
      100:   70:        if(testG.handCount[thisPlayer+1] == G.handCount[thisPlayer+1] + otherPlayerDraw)
      100:   71:            assertTrue();
        -:   72:        
      100:   73:        if(testG.deckCount[thisPlayer+1] == G.deckCount[thisPlayer+1] - otherPlayerDraw)
      100:   74:            assertTrue();
        -:   75:        
      100:   76:        if(testG.numBuys == G.numBuys + buys)
      100:   77:            assertTrue();
        -:   78:        
        -:   79:    }
        -:   80:
        -:   81:
        -:   82:
        -:   83:
        -:   84:
        1:   85:    return 0;
        -:   86:}
----------------- Testing Card: village ----------------
File 'randomtest2.c'
Lines executed:96.77% of 31
Creating 'randomtest2.c.gcov'

        -:    0:Source:randomtest2.c
        -:    0:Graph:randomtest2.gcno
        -:    0:Data:randomtest2.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "village"
        -:   15:
        -:   16:
     1500:   17:int assertTrue(){
     1500:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        5:   23:int main() {
        5:   24:    int newCards = 0;
        5:   25:    int discarded = 1;
        5:   26:    int xtraCoins = 0;
        5:   27:    int shuffledCards = 0;
        5:   28:    int deckCount = 0;
        5:   29:    int actions = 0;
        -:   30:
        5:   31:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        5:   32:    int seed = 5281;
        5:   33:    int numPlayers = 2;
        5:   34:    int thisPlayer = 0;
        -:   35:	struct gameState G, testG;
        5:   36:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   37:			sea_hag, tribute, smithy, council_room};
        -:   38:
        -:   39:	
        5:   40:	  printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
      505:   41:    for(int i = 0; i < 100; i++){
      500:   42:        initializeGame(numPlayers, k, seed, &G); // initialize a game state and player cards
        -:   43:      
      500:   44:        actions = rand() % 300;
        -:   45:
      500:   46:        G.numActions = actions;
        -:   47:
      500:   48:        memcpy(&testG, &G, sizeof(struct gameState));
        -:   49:    
      500:   50:        cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   51:        
      500:   52:        newCards = 1; 
        -:   53:        
        -:   54:        
      500:   55:        if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   56:            assertTrue();
      500:   57:        if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
      500:   58:            assertTrue();
      500:   59:        if(testG.numActions == G.numActions + 2)
      500:   60:            assertTrue();
        -:   61:
      500:   62:        if(testG.coins == G.coins + xtraCoins)
      500:   63:            assertTrue();
        -:   64:
        -:   65:
        -:   66:    }
        5:   67:    return 0;
        -:   68:}
----------------- Testing Card: adventurer ----------------
File 'randomtestadventurer.c'
Lines executed:96.55% of 29
Creating 'randomtestadventurer.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * randomtestadventurer: randomtestadventurer.c dominion.o rngs.o
        -:    5: *      gcc -o randomtestadventurer -g  randomtestadventurer.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#include<time.h>
        -:   15:#define TESTCARD "adventurer"
        -:   16:
        -:   17:
      200:   18:int assertTrue(){
      200:   19:	return 1;
        -:   20:}
        -:   21:
        -:   22:
        -:   23:
        1:   24:int main() {
        1:   25:    srand(time(NULL));
        1:   26:    int newCards = 0;
        1:   27:    int discarded = 1;
        1:   28:    int xtraCoins = 0;
        1:   29:    int shuffledCards = 0;
        -:   30:    int random;
        -:   31:
        1:   32:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   33:    int seed = 5281;
        1:   34:    int numPlayers = 2;
        1:   35:    int thisPlayer = 0;
        -:   36:	struct gameState G, testG;
        1:   37:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   38:			sea_hag, tribute, smithy, council_room};
        -:   39:
        -:   40:
        -:   41:    
        1:   42:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
      101:   43:    for(int i = 0; i < 100; i++){
        -:   44:        // initialize a game state and player cards
      100:   45:        initializeGame(numPlayers, k, seed, &G);
        -:   46:        
      100:   47:        random = rand() % 300;
    15751:   48:        for(int j = 0; j < random; j++){
    15651:   49:            gainCard(copper, &G, 1, 0);
        -:   50:        }
        -:   51:
      100:   52:        memcpy(&testG, &G, sizeof(struct gameState));
        -:   53:
      100:   54:        cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   55:
      100:   56:        newCards = 2; //two treasure cards
        -:   57:       
        -:   58:        
      100:   59:        if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   60:            assertTrue();
      100:   61:        if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
      100:   62:            assertTrue();
      100:   63:        if(testG.coins == G.coins + xtraCoins)
      100:   64:            assertTrue();
        -:   65:
        -:   66:    }
        -:   67:
        1:   68:    return 0;
        -:   69:}
