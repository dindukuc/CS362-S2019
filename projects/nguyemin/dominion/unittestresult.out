        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "adventurer"
        -:   15:
        -:   16:
        1:   17:int assertTrue(){
        1:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int xtraCoins = 0;
        1:   27:    int shuffledCards = 0;
        1:   28:    int deckCount = 0;
        -:   29:
        1:   30:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:    int seed = 5281;
        1:   32:    int numPlayers = 2;
        1:   33:    int thisPlayer = 0;
        -:   34:	struct gameState G, testG;
        1:   35:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:			sea_hag, tribute, smithy, council_room};
        -:   37:
        -:   38:	// initialize a game state and player cards
        1:   39:	initializeGame(numPlayers, k, seed, &G);
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   41:
        -:   42:	//Test 1
        1:   43:	printf("TEST 1\n"); //all cards are discarded
        -:   44:
        -:   45:
        1:   46:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   47:  
        1:   48:    deckCount = testG.deckCount[thisPlayer];
        -:   49:   
        6:   50:    for(int i = 0; i < deckCount; i++){
        5:   51:        drawCard(thisPlayer, &testG);
        5:   52:        discardCard(testG.handCount[thisPlayer] - 1, thisPlayer, &testG, 0);
        -:   53:        
        -:   54:    }
        -:   55:   
        -:   56:
        1:   57:    cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   58:
        -:   59:    
        -:   60:    
        -:   61:    
        1:   62:    newCards = 2; //treasure
        -:   63:    //xtraCoins = 0;
        -:   64:
        1:   65:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   66:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer]+2, G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   67:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   68:	
        1:   69:    if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   70:        assertTrue();
        1:   71:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
    #####:   72:        assertTrue();
        1:   73:	if(testG.coins == G.coins + xtraCoins)
        1:   74:        assertTrue();
        -:   75:
        -:   76:
        -:   77:
        1:   78:    return 0;
        -:   79:}
        -:    0:Source:unittest2.c
        -:    0:Graph:unittest2.gcno
        -:    0:Data:unittest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "smithy"
        -:   15:
        -:   16:
        1:   17:int assertTrue(){
        1:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int xtraCoins = 0;
        1:   27:    int shuffledCards = 0;
        1:   28:    int deckCount = 0;
        -:   29:
        1:   30:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:    int seed = 5281;
        1:   32:    int numPlayers = 2;
        1:   33:    int thisPlayer = 0;
        -:   34:	struct gameState G, testG;
        1:   35:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:			sea_hag, tribute, smithy, council_room};
        -:   37:
        -:   38:	// initialize a game state and player cards
        1:   39:	initializeGame(numPlayers, k, seed, &G);
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   41:
        -:   42:	//Test 1
        1:   43:	printf("TEST 1\n"); //all cards are discarded
        -:   44:
        -:   45:
        1:   46:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   47:  
        1:   48:    deckCount = testG.deckCount[thisPlayer];
        -:   49:    
        6:   50:    for(int i = 0; i < deckCount; i++){
        5:   51:        drawCard(thisPlayer, &testG);
        5:   52:        discardCard(testG.handCount[thisPlayer] - 1, thisPlayer, &testG, 0);
        -:   53:
        -:   54:    }
        -:   55:    //printf("DeckCount: %d\n", testG.deckCount[thisPlayer]);
        -:   56:
        1:   57:    cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   58:
        -:   59:    
        -:   60:    
        -:   61:    
        1:   62:    newCards = 3; //three cards
        -:   63:    //xtraCoins = 0;
        -:   64:
        1:   65:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   66:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   67:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   68:	
        1:   69:    if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   70:        assertTrue();
        1:   71:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
    #####:   72:        assertTrue();
        1:   73:	if(testG.coins == G.coins + xtraCoins)
        1:   74:        assertTrue();
        -:   75:
        -:   76:
        -:   77:
        1:   78:    return 0;
        -:   79:}
        -:    0:Source:unittest3.c
        -:    0:Graph:unittest3.gcno
        -:    0:Data:unittest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "village"
        -:   15:
        -:   16:
        4:   17:int assertTrue(){
        4:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int xtraCoins = 0;
        1:   27:    int shuffledCards = 0;
        1:   28:    int deckCount = 0;
        -:   29:
        1:   30:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:    int seed = 5281;
        1:   32:    int numPlayers = 2;
        1:   33:    int thisPlayer = 0;
        -:   34:	struct gameState G, testG;
        1:   35:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:			sea_hag, tribute, smithy, council_room};
        -:   37:
        -:   38:	// initialize a game state and player cards
        1:   39:	initializeGame(numPlayers, k, seed, &G);
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   41:
        -:   42:	//Test 1
        1:   43:	printf("TEST 1\n"); //normal operations
        -:   44:
        -:   45:
        1:   46:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   47:  
        1:   48:    cardEffect(village, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   49:    
        1:   50:    newCards = 1; //three cards
        -:   51:    //xtraCoins = 0;
        -:   52:
        1:   53:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   54:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   55:	printf("actions = %d, expected = %d\n", testG.numActions, G.numActions + 2);
        1:   56:    printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   57:	
        1:   58:    if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
        1:   59:        assertTrue();
        1:   60:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
        1:   61:        assertTrue();
        1:   62:	if(testG.numActions == G.numActions + 2)
        1:   63:        assertTrue();
        -:   64:
        1:   65:    if(testG.coins == G.coins + xtraCoins)
        1:   66:        assertTrue();
        -:   67:
        -:   68:
        -:   69:
        1:   70:    return 0;
        -:   71:}
        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "greathall"
        -:   15:
        -:   16:
        2:   17:int assertTrue(){
        2:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int xtraCoins = 0;
        1:   27:    int shuffledCards = 0;
        1:   28:    int deckCount = 0;
        -:   29:
        1:   30:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:    int seed = 5281;
        1:   32:    int numPlayers = 2;
        1:   33:    int thisPlayer = 0;
        -:   34:	struct gameState G, testG;
        1:   35:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:			sea_hag, tribute, smithy, council_room};
        -:   37:
        -:   38:	// initialize a game state and player cards
        1:   39:	initializeGame(numPlayers, k, seed, &G);
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   41:
        -:   42:	//Test 1
        1:   43:	printf("TEST 1\n"); //all cards are discarded
        -:   44:
        -:   45:
        1:   46:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   47:    
        -:   48:    
        1:   49:    cardEffect(great_hall, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   50:
        -:   51:    
        -:   52:    
        -:   53:    
        1:   54:    newCards = 1; //one card
        -:   55:    
        -:   56:
        1:   57:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   58:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   59:	printf("actions = %d, expected = %d\n", testG.numActions, G.numActions + 1);
        1:   60:    printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   61:	
        1:   62:    if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   63:        assertTrue();
        1:   64:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
    #####:   65:        assertTrue();
        1:   66:	if(testG.numActions == G.numActions + 1)
        1:   67:        assertTrue();
        1:   68:    if(testG.coins == G.coins + xtraCoins)
        1:   69:        assertTrue();
        -:   70:
        -:   71:
        -:   72:
        1:   73:    return 0;
        -:   74:}
        -:    0:Source:cardtest1.c
        -:    0:Graph:cardtest1.gcno
        -:    0:Data:cardtest1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest1: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "adventurer"
        -:   15:
        -:   16:
        1:   17:int assertTrue(){
        1:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int xtraCoins = 0;
        1:   27:    int shuffledCards = 0;
        -:   28:
        1:   29:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   30:    int seed = 5281;
        1:   31:    int numPlayers = 2;
        1:   32:    int thisPlayer = 0;
        -:   33:	struct gameState G, testG;
        1:   34:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   35:			sea_hag, tribute, smithy, council_room};
        -:   36:
        -:   37:	// initialize a game state and player cards
        1:   38:	initializeGame(numPlayers, k, seed, &G);
        1:   39:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   40:
        -:   41:	//Test 1
        1:   42:	printf("TEST 1\n"); //normal operations
        -:   43:
        1:   44:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:
        1:   46:    cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   47:
        1:   48:    newCards = 2; //two treasure cards
        -:   49:    //xtraCoins = 0;
        -:   50:
        1:   51:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   52:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   53:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        1:   54:	if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   55:        assertTrue();
        1:   56:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
    #####:   57:        assertTrue();
        1:   58:	if(testG.coins == G.coins + xtraCoins)
        1:   59:        assertTrue();
        -:   60:
        -:   61:    // //Test 2
        -:   62:	// printf("TEST 2\n"); //only one treasure card in deck
        -:   63:
        -:   64:    // memcpy(&testG, &G, sizeof(struct gameState));
        -:   65:
        -:   66:    //only leave one treasure card in the deck
        -:   67:    // cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   68:
        -:   69:    // newCards = 1; //1 treasure cards
        -:   70:    // //xtraCoins = 0;
        -:   71:
        -:   72:    // printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        -:   73:	// printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   74:	// printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   75:	// if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
        -:   76:    //     assertTrue();
        -:   77:	// if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
        -:   78:    //     assertTrue();
        -:   79:	// if(testG.coins == G.coins + xtraCoins)
        -:   80:    //     assertTrue();
        -:   81:
        -:   82:    // //Test 3
        -:   83:	// printf("TEST 3\n"); //2 treasure cards in discard pile
        -:   84:
        -:   85:    // memcpy(&testG, &G, sizeof(struct gameState));
        -:   86:
        -:   87:    //put all treasure cards in the discard pile
        -:   88:    // cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   89:
        -:   90:    // newCards = 2; //two treasure cards
        -:   91:    // //xtraCoins = 0;
        -:   92:
        -:   93:    // printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        -:   94:	// printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   95:	// printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   96:	// if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
        -:   97:    //     assertTrue();
        -:   98:	// if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
        -:   99:    //     assertTrue();
        -:  100:	// if(testG.coins == G.coins + xtraCoins)
        -:  101:    //     assertTrue();
        -:  102:
        -:  103:
        -:  104:
        -:  105:
        -:  106:
        1:  107:    return 0;
        -:  108:}
        -:    0:Source:cardtest2.c
        -:    0:Graph:cardtest2.gcno
        -:    0:Data:cardtest2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest2: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "smithy"
        -:   15:
        -:   16:
        1:   17:int assertTrue(){
        1:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int xtraCoins = 0;
        1:   27:    int shuffledCards = 0;
        -:   28:
        1:   29:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   30:    int seed = 5281;
        1:   31:    int numPlayers = 2;
        1:   32:    int thisPlayer = 0;
        -:   33:	struct gameState G, testG;
        1:   34:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   35:			sea_hag, tribute, smithy, council_room};
        -:   36:
        -:   37:	// initialize a game state and player cards
        1:   38:	initializeGame(numPlayers, k, seed, &G);
        1:   39:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   40:
        -:   41:	//Test 1
        1:   42:	printf("TEST 1\n"); //normal operations
        -:   43:
        1:   44:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   45:
        -:   46:
        1:   47:    cardEffect(smithy, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   48:
        1:   49:    newCards = 3; //three cards
        -:   50:    //xtraCoins = 0;
        -:   51:
        1:   52:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   53:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   54:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        1:   55:	if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   56:        assertTrue();
        1:   57:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
    #####:   58:        assertTrue();
        1:   59:	if(testG.coins == G.coins + xtraCoins)
        1:   60:        assertTrue();
        -:   61:
        -:   62:    // //Test 2
        -:   63:	// printf("TEST 2\n"); //no more cards in the deck
        -:   64:
        -:   65:    // memcpy(&testG, &G, sizeof(struct gameState));
        -:   66:
        -:   67:    //only leave one treasure card in the deck
        -:   68:    // cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   69:
        -:   70:    // newCards = 1; //1 treasure cards
        -:   71:    // //xtraCoins = 0;
        -:   72:
        -:   73:    // printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        -:   74:	// printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   75:	// printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   76:	// if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
        -:   77:    //     assertTrue();
        -:   78:	// if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
        -:   79:    //     assertTrue();
        -:   80:	// if(testG.coins == G.coins + xtraCoins)
        -:   81:    //     assertTrue();
        -:   82:
        -:   83:    // //Test 3
        -:   84:	// printf("TEST 3\n"); //2 treasure cards in discard pile
        -:   85:
        -:   86:    // memcpy(&testG, &G, sizeof(struct gameState));
        -:   87:
        -:   88:    //put all treasure cards in the discard pile
        -:   89:    // cardEffect(adventurer, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   90:
        -:   91:    // newCards = 2; //two treasure cards
        -:   92:    // //xtraCoins = 0;
        -:   93:
        -:   94:    // printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        -:   95:	// printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        -:   96:	// printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   97:	// if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
        -:   98:    //     assertTrue();
        -:   99:	// if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
        -:  100:    //     assertTrue();
        -:  101:	// if(testG.coins == G.coins + xtraCoins)
        -:  102:    //     assertTrue();
        -:  103:
        -:  104:
        -:  105:
        -:  106:
        -:  107:
        1:  108:    return 0;
        -:  109:}
        -:    0:Source:cardtest3.c
        -:    0:Graph:cardtest3.gcno
        -:    0:Data:cardtest3.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest3: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "Council Room"
        -:   15:
        -:   16:
        1:   17:int assertTrue(){
        1:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int buys = 0;
        1:   27:    int otherPlayerDraw = 0;
        1:   28:    int shuffledCards = 0;
        -:   29:
        1:   30:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   31:    int seed = 5281;
        1:   32:    int numPlayers = 2;
        1:   33:    int thisPlayer = 0;
        -:   34:	struct gameState G, testG;
        1:   35:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   36:			sea_hag, tribute, smithy, council_room};
        -:   37:
        -:   38:	// initialize a game state and player cards
        1:   39:	initializeGame(numPlayers, k, seed, &G);
        1:   40:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   41:
        -:   42:	//Test 1
        1:   43:	printf("TEST 1\n"); //normal operations
        -:   44:
        1:   45:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   46:
        -:   47:
        1:   48:    cardEffect(council_room, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   49:
        1:   50:    newCards = 4; //four cards
        1:   51:    buys = 1;
        1:   52:    otherPlayerDraw = 1;
        -:   53:    //xtraCoins = 0;
        -:   54:
        1:   55:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   56:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer] - newCards + shuffledCards);
        1:   57:	printf("Buys = %d, expected = %d\n", testG.numBuys, G.numBuys + buys);
        -:   58:    
        1:   59:    printf("Other player's hand count = %d, expected = %d\n", testG.handCount[thisPlayer+1], G.handCount[thisPlayer+1] + otherPlayerDraw);
        1:   60:	printf("Other player's deck count = %d, expected = %d\n", testG.deckCount[thisPlayer+1], G.deckCount[thisPlayer+1] - otherPlayerDraw);
        -:   61:    
        1:   62:    if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
    #####:   63:        assertTrue();
        1:   64:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
    #####:   65:        assertTrue();
        -:   66:    
        1:   67:    if(testG.handCount[thisPlayer+1] == G.handCount[thisPlayer+1] + otherPlayerDraw)
    #####:   68:        assertTrue();
        -:   69:    
        1:   70:    if(testG.deckCount[thisPlayer+1] == G.deckCount[thisPlayer+1] - otherPlayerDraw)
    #####:   71:        assertTrue();
        -:   72:    
        1:   73:     if(testG.numBuys == G.numBuys + buys)
        1:   74:        assertTrue();
        -:   75:	
        -:   76:
        -:   77:
        -:   78:
        -:   79:
        -:   80:
        -:   81:
        1:   82:    return 0;
        -:   83:}
        -:    0:Source:cardtest4.c
        -:    0:Graph:cardtest4.gcno
        -:    0:Data:cardtest4.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/*
        -:    2: * Include the following lines in your makefile:
        -:    3: *
        -:    4: * cardtest4: cardtest4.c dominion.o rngs.o
        -:    5: *      gcc -o cardtest1 -g  cardtest4.c dominion.o rngs.o $(CFLAGS)
        -:    6: */
        -:    7:#include "dominion.h"
        -:    8:#include "dominion_helpers.h"
        -:    9:#include <string.h>
        -:   10:#include <stdio.h>
        -:   11:#include <assert.h>
        -:   12:#include "rngs.h"
        -:   13:#include <stdlib.h>
        -:   14:#define TESTCARD "Minion"
        -:   15:
        -:   16:
       10:   17:int assertTrue(){
       10:   18:	return 1;
        -:   19:}
        -:   20:
        -:   21:
        -:   22:
        1:   23:int main() {
        1:   24:    int newCards = 0;
        1:   25:    int discarded = 1;
        1:   26:    int actions = 0;
        1:   27:    int otherPlayerDraw = 0;
        1:   28:    int shuffledCards = 0;
        1:   29:    int xtraCoins = 0;
        -:   30:
        1:   31:    int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
        1:   32:    int seed = 5281;
        1:   33:    int numPlayers = 2;
        1:   34:    int thisPlayer = 0;
        -:   35:	struct gameState G, testG;
        1:   36:	int k[10] = {adventurer, embargo, village, minion, mine, cutpurse,
        -:   37:			sea_hag, tribute, smithy, council_room};
        -:   38:
        -:   39:	// initialize a game state and player cards
        1:   40:	initializeGame(numPlayers, k, seed, &G);
        1:   41:    printf("----------------- Testing Card: %s ----------------\n", TESTCARD);
        -:   42:
        -:   43:	//Test 1
        1:   44:	printf("TEST 1\n"); //normal operations choice 1
        -:   45:
        -:   46:   
        1:   47:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   48:
        1:   49:    choice1 = 1;
        1:   50:    printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        -:   51:
        1:   52:    cardEffect(minion, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   53:
        1:   54:    actions = 1;
        1:   55:    xtraCoins = 2;
        -:   56:
        -:   57:
        1:   58:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   59:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer]+ shuffledCards);
        1:   60:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        1:   61:    printf("actions = %d, expected = %d\n", testG.numActions, G.numActions + actions);
        -:   62:    
        -:   63:   
        1:   64:    if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
        1:   65:        assertTrue();
        1:   66:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
        1:   67:        assertTrue();
        1:   68:	if(testG.numActions == G.numActions + 1)
        1:   69:        assertTrue();
        1:   70:    if(testG.coins == G.coins + xtraCoins)
        1:   71:        assertTrue();
        -:   72:
        -:   73:
        -:   74:
        -:   75:
        -:   76:    //Test 1
        1:   77:	printf("TEST 2\n"); //normal operations choice 1
        -:   78:
        -:   79:   
        1:   80:    memcpy(&testG, &G, sizeof(struct gameState));
        -:   81:
        1:   82:    choice2 = 1;
        -:   83:
        1:   84:    cardEffect(minion, choice1, choice2, choice3, &testG, handpos, &bonus);
        -:   85:
        1:   86:    actions = 1;
        -:   87:
        1:   88:    if(G.handCount[thisPlayer+1] > 4){
    #####:   89:        otherPlayerDraw = 4- G.handCount[thisPlayer+1];
        -:   90:    }
        -:   91:    else{
        1:   92:        otherPlayerDraw = 0;
        -:   93:    }
        -:   94:
        -:   95:
        1:   96:    printf("hand count = %d, expected = %d\n", testG.handCount[thisPlayer], G.handCount[thisPlayer] + newCards - discarded);
        1:   97:	printf("deck count = %d, expected = %d\n", testG.deckCount[thisPlayer], G.deckCount[thisPlayer]+ shuffledCards);
        1:   98:	printf("coins = %d, expected = %d\n", testG.coins, G.coins + xtraCoins);
        1:   99:    printf("actions = %d, expected = %d\n", testG.numActions, G.numActions + actions);
        -:  100:    
        1:  101:    printf("Other player's hand count = %d, expected = %d\n", testG.handCount[thisPlayer+1], G.handCount[thisPlayer+1] + otherPlayerDraw);
        1:  102:	printf("Other player's deck count = %d, expected = %d\n", testG.deckCount[thisPlayer+1], G.deckCount[thisPlayer+1] - otherPlayerDraw);
        -:  103:    
        -:  104:   
        1:  105:   if(testG.handCount[thisPlayer] == G.handCount[thisPlayer] + newCards - discarded)
        1:  106:        assertTrue();
        1:  107:	if(testG.deckCount[thisPlayer] == G.deckCount[thisPlayer] - newCards + shuffledCards)
        1:  108:        assertTrue();
        1:  109:	if(testG.numActions == G.numActions + 1)
        1:  110:        assertTrue();
        1:  111:    if(testG.coins == G.coins + xtraCoins)
        1:  112:        assertTrue();
        1:  113:    if(testG.handCount[thisPlayer+1] == G.handCount[thisPlayer+1] + otherPlayerDraw)
        1:  114:        assertTrue();
        1:  115:    if( testG.deckCount[thisPlayer+1] == G.deckCount[thisPlayer+1] - otherPlayerDraw)
        1:  116:        assertTrue();
        -:  117:
        -:  118:
        -:  119:
        -:  120:
        -:  121:
        1:  122:    return 0;
        -:  123:}
